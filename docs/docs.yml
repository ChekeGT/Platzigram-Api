openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
# Added by API Auto Mocking Plugin
# Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/B4574/Platzigram/1.0.0
  - description: Local server.
    url: https://localhost:3000
  - description: Platzigram
    url: Not yet implemented.
info:
  description: |
    Platzigram is a webservice that works as a social network
    similar to Instagram.
  version: "1.0.0"
  title: Platzigram Api
  contact:
    email: chekelosos@gmail.com
  license:
    name: MIT License
    url: 'https://opensource.org/licenses/MIT'
tags:
  - name: users
    description: Access to user authentication, user creation and modification.
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
paths:
  /users/signup:
    post:
      tags:
        - users

      summary: Creates a user in plazigram.
      operationId: createUser
      responses:
        '400':
          description: Invalid Input or data is missing.
        '201':
          description: User was created successfuly.

      requestBody:
        $ref: '#/components/requestBodies/UserSignup'

  /users/login:
    post:
      tags:
        - users
      summary: Returns a JWT that can be used to authenticate an user in the api.
      responses:
        '400':
          description: Invalid credentials or data is missing.
        '200':
          description: JWT is given to you and your authenticacion can be performed.
      requestBody:
        $ref: '#/components/requestBodies/UserLogin'

  /users/verify:
    post:
      tags:
        - users
      summary: Verifies a user account.
      responses:
        '400':
          description: Invalid token, user is already verified  or user that submited the token does not exist yet.
        '200':
          description: The user is verified now.
      requestBody:
        $ref: '#/components/requestBodies/UserVerification'

  '/users/{user_username}':
    get:
      tags:
        - users
      summary: Retrieves data of an user account.
      parameters:
        - name: user_username
          in: path
          description: Username of user that is going to be retrieved.
          required: true
          schema:
            type: string
            example: pablo
      responses:
        '403':
          description: User you are trying to see is not the requesting user.
        '401':
          description: Authentication credentials are invalid.
        '404':
          description: User was not found.
        '200':
          description: Everyting is ok and the output is the user data.
    put:
      tags:
        - users
      summary: Updates data of an user account.
      parameters:
        - name: user_username
          in: path
          description: Username of user that is going to be edited
          required: true
          schema:
            type: string
            example: pablo
      responses:
        '400':
          description: Data is missing or data provided is wrong.
        '403':
          description: User you are trying to update is not the requesting user.
        '401':
          description: Authentication credentials are invalid.
        '404':
          description: User was not found.
        '200':
          description: User was sucessfuly updated.

      requestBody:
        $ref: '#/components/requestBodies/UserUpdating'

    patch:
      tags:
        - users
      summary: Partialy updates data of an user account.
      parameters:
        - name: user_username
          in: path
          description: Username of user that is going to be edited
          required: true
          schema:
            type: string
            example: pablo
      responses:
        '400':
          description: Data provided is wrong.
        '403':
          description: User you are trying to update is not the requesting user.
        '401':
          description: Authentication credentials are invalid.
        '404':
          description: User was not found.
        '200':
          description: User was sucessfuly updated.

      requestBody:
        $ref: '#/components/requestBodies/UserPartialUpdating'
    delete:
      tags:
       - users
      summary: Deletes an user account.
      parameters:
        - name: user_username
          in: path
          description: Username of user that is going to be deleted.
          required: true
          schema:
            type: string
            example: pablo
      responses:
        '403':
          description: User you are trying to delete is not the requesting user.
        '401':
          description: Authentication credentials are invalid.
        '404':
          description: User was not found.
        '204':
          description: Everyting is ok and the the user was deleted.


components:
  schemas:
    UserSignup:
      type: object
      required:
        - username
        - email
        - password
        - password_confirmation
        - first_name
        - last_name
        - phone_number
      properties:
        username:
          type: string
          example: pablo

        email:
          type: string
          example: pablo@gmail.com

        password:
          type: string
          example: pablo1234

        password_confirmation:
          type: string
          example: pablo1234

        first_name:
          type: string
          example: Pablo Trinidad

        last_name:
          type: string
          example: Pa
    UserLogin:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: pablo
        password:
          type: string
          example: pablo1234
    UserVerification:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    UserUpdating:
      type: object
      required:
        - username
      properties:
        username:
          type: string
          example: pablo
        first_name:
          type: string
          example: Luis
        last_name:
          type: string
          example: Lopez
        phone_number:
          type: string
          example: +1 5413216546
        password:
          type: string
          example: luis123456
        new_password:
          type: string
          example: luisitorey1234
        new_password_confirmation:
          type: string
          example: luisitorey1234

  requestBodies:
    UserSignup:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserSignup'
      description: User object that is going to be created.
      required: true

    UserLogin:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserLogin'

      description: User object that is going to authenticate.
      required: true
    UserVerification:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserVerification'
      description: Token for verifying the user.
      required: true

    UserUpdating:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserUpdating'
      description: User data to change.
      required: true

    UserPartialUpdating:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserUpdating'
      description: User Data to change
      required: false
